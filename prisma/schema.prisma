// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Permission {
  id              Int              @id @default(autoincrement())
  permission_name String           @unique
  permission_code String           @unique
  description     String?
  created_at      DateTime         @default(now())
  updated_at      DateTime         @updatedAt
  roles           RolePermission[]

  @@map("permissions")
}

model Role {
  id          Int              @id @default(autoincrement())
  role_name   String           @unique
  description String?
  created_at  DateTime         @default(now())
  updated_at  DateTime         @updatedAt
  permissions RolePermission[]
  users       User[]

  @@map("roles")
}

model RolePermission {
  id            Int        @id @default(autoincrement())
  role_id       Int
  permission_id Int
  created_at    DateTime   @default(now())
  updated_at    DateTime   @updatedAt
  permission    Permission @relation(fields: [permission_id], references: [id])
  role          Role       @relation(fields: [role_id], references: [id])

  @@map("role_permissions")
}

model User {
  id                 String    @id @default(uuid())
  username           String    @unique
  email              String    @unique
  role_id            Int?
  password           String
  blockchain_address String?   @unique
  is_active          Boolean   @default(false)
  created_at         DateTime  @default(now())
  created_by_id      String?
  updated_at         DateTime  @updatedAt
  updated_by_id      String?
  deleted_at         DateTime?
  role               Role?     @relation(fields: [role_id], references: [id])
  created_by         User?     @relation("created_by", fields: [created_by_id], references: [id])
  created_users      User[]    @relation("created_by")
  updated_by         User?     @relation("updated_users", fields: [updated_by_id], references: [id])
  updated_users      User[]    @relation("updated_users")
  files              File[]    @relation("file_to_user")
  update_files       File[]    @relation("file_to_user_update")
  logs               Log[]     @relation("log_to_user")

  @@map("users")
}

model File {
  id                 String    @id @default(uuid())
  user_id            String
  user               User      @relation(fields: [user_id], references: [id], name: "file_to_user")
  file_name          String
  file_name_original String
  file_description   String
  file_mime_type     String
  file_url           String
  file_hash          String
  blockchain_address String?
  created_at         DateTime  @default(now())
  updated_at         DateTime  @updatedAt
  updated_by_id      String?
  updated_by         User?     @relation(fields: [updated_by_id], references: [id], name: "file_to_user_update")
  deleted_at         DateTime?

  @@map("files")
}

enum Action {
  LOGIN
  REGISTER
  CREATE_USER
  UPDATE_USER
  DELETE_USER
  VIEW_USER
  CREATE_FILE
  VIEW_FILE
  UPDATE_FILE
  DELETE_FILE
}

model Log {
  id         String   @id @default(uuid())
  timestamp  DateTime @default(now())
  action     Action
  user_id    String
  ip_address String
  user_agent String
  details    String
  user       User     @relation(fields: [user_id], references: [id], name: "log_to_user")
  
  @@map("logs")
}
